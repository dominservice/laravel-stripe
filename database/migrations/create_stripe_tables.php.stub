<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migration.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('stripe_accounts', function (Blueprint $table) {
            $table->id();
            $table->string('stripe_account_id')->nullable();

            $this->setUserRelation($table);

            $table->boolean('has_person')->default(0);
            $table->boolean('has_bank_account')->default(0);
            $table->boolean('has_payment_card')->default(0);
            $table->boolean('has_agreement_acceptance')->default(0);
            $table->string('type_account')->nullable(); // custom, standard, express

            $table->timestamps();
            $table->softDeletes();

            $table->index(array('stripe_account_id', 'user_id'));
        });

        Schema::create('stripe_customers', function (Blueprint $table) {
            $table->id();
            $table->string('stripe_customer_id')->nullable();

            $this->setUserRelation($table);

            $table->timestamps();
            $table->softDeletes();

            $table->index(['stripe_customer_id', 'user_id']);
        });

        Schema::create('stripe_products', function (Blueprint $table) {
            $table->id();
            $table->string('stripe_product_id')->nullable()->unique();
            $table->nullableMorphs('parent');
            $table->nullableUlidMorphs('ulid_parent');
            $table->nullableUuidMorphs('uuid_parent');
            $table->string('name')->nullable();
            $table->boolean('status')->default(1);
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('stripe_prices', function (Blueprint $table) {
            $table->id();
            $table->foreignId('product_id')->nullable()
                ->references('id')
                ->on('stripe_products')
                ->onDelete('cascade');
            $table->string('stripe_price_id')->unique();
            $table->boolean('status')->default(1);
            $table->decimal('price', 16, 4)->nullable();
            $table->string('currency')->nullable();
            $table->boolean('is_default')->default(0);
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('stripe_subscriptions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('customer_id')->nullable()
                ->references('id')
                ->on('stripe_customers')
                ->onDelete('cascade');
            $table->string('stripe_subscription_id')->nullable()->unique();
            $table->string('stripe_checkout_session_id')->nullable()->index();
            $table->string('description')->nullable();
            $table->boolean('cancel_at_period_end')->default(0);
            $table->timestamps();
            $table->softDeletes();
        });

        Schema::create('stripe_subscription_prices', function (Blueprint $table) {
            $table->id();
            $table->foreignId('subscription_id')
                ->references('id')
                ->on('stripe_subscriptions')
                ->onDelete('cascade');
            $table->foreignId('price_id')
                ->references('id')
                ->on('stripe_prices')
                ->onDelete('cascade');
        });
    }

    /**
     * Reverse the migration.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('stripe_subscription_prices');
        Schema::dropIfExists('stripe_subscriptions');
        Schema::dropIfExists('stripe_prices');
        Schema::dropIfExists('stripe_products');
        Schema::dropIfExists('stripe_customers');
        Schema::dropIfExists('stripe_accounts');
    }

    private function setUserRelation(&$table)
    {
        $userModel = new (config('stripe.model'));

        if ($userModel->getKeyType() === 'uuid') {
            $table->uuid('user_id');
            $table->foreign('user_id')
                ->references($userModel->getKeyName())
                ->on($userModel->getTable())
                ->onDelete('cascade');
        } elseif ($userModel->getKeyType() === 'ulid') {
            $table->ulid('user_id');
            $table->foreign('user_id')
                ->references($userModel->getKeyName())
                ->on($userModel->getTable())
                ->onDelete('cascade');
        } else {
            $table->foreignId('user_id')
                ->references($userModel->getKeyName())
                ->on($userModel->getTable())
                ->onDelete('cascade');
        }
    }
};
